const http = require('http');
const fs = require('fs');

console.log('üîç DEBUGGING IMAGE GENERATION ISSUE\n');

const testData = JSON.stringify({
  prompt: "Create a simple gym website with hero section and services",
  useBoltPrompt: true
});

const req = http.request('http://localhost:5000/api/genCode', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json'
  }
}, (res) => {
  let body = '';
  
  res.on('data', (chunk) => {
    body += chunk;
  });
  
  res.on('end', () => {
    try {
      const result = JSON.parse(body);
      
      console.log('üìä Response Analysis:');
      console.log(`Status: ${res.statusCode}`);
      console.log(`Files generated: ${Object.keys(result.files || {}).length}`);
      
      if (result.files) {
        // Save raw generated files for inspection
        console.log('\nüìÅ Generated Files:');
        Object.keys(result.files).forEach(filename => {
          console.log(`   - ${filename} (${result.files[filename].length} chars)`);
        });
        
        // Check specifically for image-related content
        console.log('\nüîç Searching for Image Content:');
        
        const componentFiles = Object.entries(result.files).filter(([name]) => 
          name.includes('.jsx') || name.includes('.js')
        );
        
        let totalPlaceholders = 0;
        let totalImageTags = 0;
        let totalProcessedImages = 0;
        
        componentFiles.forEach(([filename, content]) => {
          // Check for image placeholders
          const placeholders = content.match(/\/\*IMAGE:[^*]+\*\//g) || [];
          const imageTags = content.match(/<img[^>]*src=/g) || [];
          const processedImages = content.match(/src="[^"]*\.(jpg|jpeg|png|gif|webp)[^"]*"/g) || [];
          
          totalPlaceholders += placeholders.length;
          totalImageTags += imageTags.length;
          totalProcessedImages += processedImages.length;
          
          if (placeholders.length > 0 || imageTags.length > 0 || processedImages.length > 0) {
            console.log(`\nüìÑ ${filename}:`);
            console.log(`   Placeholders: ${placeholders.length}`);
            console.log(`   Image tags: ${imageTags.length}`);
            console.log(`   Processed URLs: ${processedImages.length}`);
            
            if (placeholders.length > 0) {
              console.log(`   üîß Found placeholders: ${placeholders.slice(0, 3).join(', ')}`);
            }
            
            if (processedImages.length > 0) {
              console.log(`   ‚úÖ Processed images: ${processedImages.slice(0, 2).join(', ')}`);
            }
          }
        });
        
        console.log(`\nüìà TOTALS:`);
        console.log(`Total placeholders: ${totalPlaceholders}`);
        console.log(`Total image tags: ${totalImageTags}`);
        console.log(`Total processed images: ${totalProcessedImages}`);
        
        // Diagnostic analysis
        if (totalPlaceholders > 0 && totalProcessedImages === 0) {
          console.log('\n‚ùå ISSUE FOUND: Placeholders exist but not processed');
          console.log('   Problem: Image processing is failing');
        } else if (totalImageTags === 0) {
          console.log('\n‚ùå ISSUE FOUND: No image tags generated by AI');
          console.log('   Problem: AI is not following image requirements');
        } else if (totalProcessedImages > 0) {
          console.log('\n‚úÖ Images appear to be processed correctly');
        } else {
          console.log('\n‚ùì UNCLEAR: Need to inspect generated content manually');
        }
        
        // Save a sample file for manual inspection
        const heroFile = result.files['src/components/Hero.jsx'];
        if (heroFile) {
          fs.writeFileSync('debug-hero-component.jsx', heroFile);
          console.log('\nüíæ Saved Hero component to debug-hero-component.jsx for inspection');
        }
        
        // Save navbar for inspection too
        const navbarFile = result.files['src/components/Navbar.jsx'];
        if (navbarFile) {
          fs.writeFileSync('debug-navbar-component.jsx', navbarFile);
          console.log('üíæ Saved Navbar component to debug-navbar-component.jsx for inspection');
        }
        
      } else {
        console.error('‚ùå No files in response');
      }
      
    } catch (error) {
      console.error('‚ùå Failed to parse response:', error.message);
      console.error('Raw response preview:', body.substring(0, 500));
    }
  });
});

req.on('error', (error) => {
  console.error('‚ùå Request failed:', error.message);
});

req.write(testData);
req.end();
